name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI Pipeline CESIZen"]
    types:
      - completed

jobs:
  trigger-check:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Triggering CD for main branch
        run: |
          echo "📌 CI status: ${{ github.event.workflow_run.conclusion }}"
          echo "📌 Target branch: ${{ github.event.workflow_run.head_branch }}"
          echo "✅ CI Passed on main, continuing with CD for production"

  deploy-db:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Postgres DB on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "📦 Creating Docker volume for Postgres (if not exists)..."
            docker volume create cesizen-db-data || true

            echo "🧱 Stopping existing Postgres..."
            docker stop cesizen-postgres || true
            docker rm cesizen-postgres || true

            echo "🐘 Starting Postgres container..."
            docker run -d \
              --name cesizen-postgres \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -e POSTGRES_DB=cesizen \
              -v cesizen-db-data:/var/lib/postgresql/data \
              -p 5432:5432 \
              postgres:15

            echo "🕐 Waiting for Postgres to be ready..."
            sleep 10
          EOF

  deploy-api:
    needs: deploy-db
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy API on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "📁 Cloning/Updating repo"
            cd ~/cesizen-prod || git clone -b main https://github.com/${{ github.repository }} ~/cesizen-prod && cd ~/cesizen-prod
            git pull origin main

            echo "📦 Installing API deps"
            cd API
            npm install
            npx prisma generate
            DATABASE_URL=postgresql://postgres:postgres@localhost:5432/cesizen JWT_SECRET=${{ secrets.JWT_SECRET }} npx prisma migrate deploy

            echo "📦 Building API..."
            npm run build 

            echo "🚀 Starting API with PM2"
            pm2 delete cesizen-api || true
            DATABASE_URL=postgresql://postgres:postgres@localhost:5432/cesizen JWT_SECRET=${{ secrets.JWT_SECRET }} pm2 start dist/server.js --name cesizen-api
          EOF

  deploy-backoffice:
    needs: deploy-api
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Backoffice on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "📁 Cloning/Updating repo"
            cd ~/cesizen-prod || git clone -b main https://github.com/${{ github.repository }} ~/cesizen-prod && cd ~/cesizen-prod
            git pull origin main

            echo "📦 Installing backoffice deps"
            cd BACKOFFICE
            npm install --legacy-peer-deps
            npm run build

            echo "🚀 Starting backoffice with PM2"
            pm2 delete cesizen-backoffice || true
            VITE_API_URL=http://localhost:3000/api pm2 start "npx vite preview --host --port 4173" --name cesizen-backoffice
          EOF

  deploy-app:
    needs: deploy-backoffice
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Expo Web App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "📁 Cloning/Updating repo"
            cd ~/cesizen-prod || git clone -b main https://github.com/${{ github.repository }} ~/cesizen-prod && cd ~/cesizen-prod
            git pull origin main

            echo "📦 Installing app deps"
            cd APP
            npm install --legacy-peer-deps
            npx expo export --platform web --output-dir dist

            echo "🚀 Starting app with PM2"
            pm2 delete cesizen-app || true
            pm2 serve dist 8080 --spa --name cesizen-app
          EOF

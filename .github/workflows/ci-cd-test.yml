name: CI + CD Test

on:
  push:
    branches: [test]

jobs:
  # ---------------- CI ----------------
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

  test-api:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Run tests via Docker Compose
        run: |
          docker compose -f docker-compose.ci.yml up --build --exit-code-from api || true

  lint-backoffice:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Lint backoffice
        run: |
          docker run --rm -v ${{ github.workspace }}/BACKOFFICE:/app node:18 bash -c "cd /app && npm install --legacy-peer-deps && npm run lint"

  lint-app:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Lint mobile app
        run: |
          docker run --rm -v ${{ github.workspace }}/APP:/app node:18 bash -c "cd /app && npm install --legacy-peer-deps && npm run lint || npx expo lint"

  build-api:
    runs-on: ubuntu-latest
    needs: test-api
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -f API/Dockerfile.test -t ${{ secrets.DOCKERHUB_USERNAME }}/cesizen-api:latest ./API
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/cesizen-api:latest

  build-backoffice:
    runs-on: ubuntu-latest
    needs: lint-backoffice
    steps:
      - uses: actions/checkout@v4
      - name: Build backoffice
        run: |
          docker run --rm -v ${{ github.workspace }}/BACKOFFICE:/app node:18 bash -c "cd /app && npm install --legacy-peer-deps && npm run build"

  build-app:
    runs-on: ubuntu-latest
    needs: lint-app
    steps:
      - uses: actions/checkout@v4
      - name: Build Expo Web
        run: |
          docker run --rm -v ${{ github.workspace }}/APP:/app node:18 bash -c "cd /app && npm install --legacy-peer-deps && npx expo export --platform web"

  # ---------------- CD ----------------
  deploy-db:
    runs-on: ubuntu-latest
    needs: [build-api, build-backoffice, build-app]
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy Test DB
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker volume create cesizen-db-test || true
            docker stop cesizen-postgres-test || true
            docker rm cesizen-postgres-test || true
            docker run -d \
              --name cesizen-postgres-test \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              -e POSTGRES_DB=cesizen_test \
              -v cesizen-db-test:/var/lib/postgresql/data \
              -p 5433:5432 \
              postgres:15
            sleep 10
          EOF

  deploy-api:
    runs-on: ubuntu-latest
    needs: deploy-db
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy API
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/cesizen-test || git clone -b test https://github.com/${{ github.repository }} ~/cesizen-test && cd ~/cesizen-test
            git pull origin test
            cd API
            npm install
            npx prisma generate
            DATABASE_URL=postgresql://postgres:postgres@localhost:5433/cesizen_test JWT_SECRET=test-secret npx prisma migrate deploy
            npm run build
            pm2 delete cesizen-api-test || true
            DATABASE_URL=postgresql://postgres:postgres@localhost:5433/cesizen_test JWT_SECRET=test-secret pm2 start dist/server.js --name cesizen-api-test
          EOF

  deploy-backoffice:
    runs-on: ubuntu-latest
    needs: deploy-api
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy Backoffice
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/cesizen-test || git clone -b test https://github.com/${{ github.repository }} ~/cesizen-test && cd ~/cesizen-test
            git pull origin test
            cd BACKOFFICE
            npm install --legacy-peer-deps
            npm run build
            pm2 delete cesizen-backoffice-test || true
            VITE_API_URL=http://localhost:3001/api pm2 start "npx vite preview --host --port 4175" --name cesizen-backoffice-test
          EOF

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-backoffice
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy Expo App
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/cesizen-test || git clone -b test https://github.com/${{ github.repository }} ~/cesizen-test && cd ~/cesizen-test
            git pull origin test
            cd APP
            npm install --legacy-peer-deps
            npx expo export --platform web --output-dir dist
            pm2 delete cesizen-app-test || true
            pm2 serve dist 8082 --spa --name cesizen-app-test
          EOF

  setup-reverse-proxy:
    runs-on: ubuntu-latest
    needs: deploy-app
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Setup Reverse Proxy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "ðŸ“¦ Installing Nginx..."
            sudo apt-get update
            sudo apt-get install -y nginx

            echo "ðŸ›‘ Stopping default nginx service..."
            sudo systemctl stop nginx
            sudo systemctl disable nginx

            echo "ðŸ“„ Writing nginx configuration..."
            sudo tee /etc/nginx/sites-available/cesizen << 'NGINX_CONFIG'
          #########################################
          # ENVIRONNEMENT TEST
          #########################################
          server {
            listen 80;
            server_name cesizentest.webredirect.org;

            location / {
              proxy_pass http://localhost:8082/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /backoffice/ {
              proxy_pass http://localhost:4175/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              rewrite ^/backoffice(.*)$ $1 break;
            }

            location /api/ {
              proxy_pass http://localhost:3001/api/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }

          #########################################
          # ENVIRONNEMENT PROD
          #########################################
          server {
            listen 80;
            server_name cesizenprod.webredirect.org;

            location / {
              proxy_pass http://localhost:8080/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /backoffice/ {
              proxy_pass http://localhost:4173/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              rewrite ^/backoffice(.*)$ $1 break;
            }

            location /api/ {
              proxy_pass http://localhost:3000/api/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }
          NGINX_CONFIG

            echo "ðŸ”— Enabling nginx site..."
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/cesizen /etc/nginx/sites-enabled/

            echo "âœ… Testing nginx configuration..."
            sudo nginx -t

            echo "ðŸš€ Starting nginx service..."
            sudo systemctl enable nginx
            sudo systemctl start nginx
            sudo systemctl reload nginx

            echo "ðŸ“Š Nginx status:"
            sudo systemctl status nginx --no-pager -l
          EOF

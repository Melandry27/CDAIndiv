name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

  install-and-build-api:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Build and prepare API on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd /home/ubuntu

            if [ ! -d "CDAIndiv/.git" ]; then
              echo "üì• Cloning repository into CDAIndiv..."
              rm -rf CDAIndiv
              git clone https://github.com/melandry27/CDAIndiv.git CDAIndiv
            else
              echo "üîÅ Pulling latest changes in CDAIndiv..."
              git -C CDAIndiv pull origin main
            fi

            cd CDAIndiv/API

            echo "üîê Injecting .env file"
            cat <<EOT > .env
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=3000
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOT

            echo "üì¶ Installing API dependencies..."
            npm install
            echo "üèóÔ∏è Building API..."
            npm run build

            echo "üß™ Checking DB state..."
            MIGRATION_COUNT=\$(npx prisma migrate status --schema ./prisma/schema.prisma --json | grep -o '"appliedMigrations":\[[^]]*\]' | grep -o '[^,]\+' | wc -l)
            if [ "\$MIGRATION_COUNT" -le 2 ]; then
              echo "üõ†Ô∏è Initializing DB..."
              npx prisma migrate deploy
            else
              echo "‚úÖ DB already initialized"
            fi
          EOF

  install-and-build-backoffice:
    needs: install-and-build-api
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Build Backoffice on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd /home/ubuntu/CDAIndiv/BACKOFFICE

            echo "üåç Injecting .env file"
            cat <<EOT > .env
          VITE_API_URL=http://34.224.12.85:3000/api
          EOT

            echo "üì¶ Installing backoffice dependencies..."
            npm install --legacy-peer-deps
            echo "üèóÔ∏è Building backoffice..."
            npm run build --silent
          EOF

  build-and-deploy-mobile-web:
    needs: install-and-build-backoffice
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Build and deploy Expo Web on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd /home/ubuntu/CDAIndiv

            if [ -d "APP" ]; then
              cd APP

              echo "üì¶ Ensuring expo is installed..."
              npm install expo || echo "‚ùå √âchec installation expo"

              echo "üåê Installing Expo Web dependencies..."
              npx expo install react-dom react-native-web @expo/webpack-config -- --legacy-peer-deps

              echo "üåç Injecting .env file"
              cat <<EOT > config.ts
          export const API_URL = "http://34.224.12.85:3000/api";
          EOT

              echo "üåê Building Expo Web..."
              npx expo export --platform web --output-dir dist || echo "‚ùå Expo Web export failed"

              echo "üöÄ Deploying Expo Web with PM2"
              command -v pm2 >/dev/null 2>&1 || sudo npm install -g pm2
              cd ..
            else
              echo "‚ùå Dossier MOBILE introuvable"
            fi
          EOF

  deploy-and-restart-pm2:
    needs: build-and-deploy-mobile-web
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Restart PM2 and launch apps
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd /home/ubuntu/CDAIndiv

            echo "üöÄ Ensuring PM2 is available..."
            command -v pm2 >/dev/null 2>&1 || sudo npm install -g pm2

            echo "üîÑ Restarting all PM2 apps..."
            pm2 stop all || true
            pm2 delete all || true

            if [ -d "API" ]; then
              cd API
              pm2 start dist/server.js --name cesizen-api --env production
              cd ..
            fi

            if [ -d "BACKOFFICE" ]; then
              cd BACKOFFICE
              pm2 start npx --name cesizen-back -- vite preview --port 4173 --host
              cd ..
            fi

            if [ -d "APP" ]; then
              cd APP
              pm2 serve dist 8080 --name cesizen-mobile-web
              cd ..
            fi

            echo "üìä Listing PM2 processes:"
            pm2 list

            echo "‚úÖ Deploy complete"
          EOF

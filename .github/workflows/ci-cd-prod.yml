name: CI + CD Prod

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# ------------------------------ CI ------------------------------

jobs:
  ci-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node + cache
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: ./API
        run: npm ci --legacy-peer-deps

      - name: Lint API
        working-directory: ./API
        run: npm run lint --if-present
        continue-on-error: true

      - name: Test API
        working-directory: ./API
        run: npm test --if-present
        continue-on-error: true

      - name: Audit API
        working-directory: ./API
        run: npm audit --if-present
        continue-on-error: true

      - name: Enregister le cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

  ci-backoffice:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node + cache
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: ./BACKOFFICE
        run: npm ci --legacy-peer-deps

      - name: Lint Backoffice
        working-directory: ./BACKOFFICE
        run: npm run lint --if-present
        continue-on-error: true

      - name: Audit Backoffice
        working-directory: ./BACKOFFICE
        run: npm audit --if-present
        continue-on-error: true

      - name: Enregister le cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

  ci-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node + cache
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: ./APP
        run: npm ci --legacy-peer-deps

      - name: Lint Mobile App
        working-directory: ./APP
        run: npm run lint --if-present
        continue-on-error: true

      - name: Audit Mobile App
        working-directory: ./APP
        run: npm audit --if-present
        continue-on-error: true

      - name: Enregister le cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

  build-api-image:
    runs-on: ubuntu-latest
    needs: ci-api
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Connection Ã  DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: ./API
          file: ./API/Dockerfile.prod
          target: api
          push: true
          tags: ghcr.io/melandry27/CDAIndiv/api:${{ github.ref_name }}
          build-args: |
            PORT=3000
            DATABASE_URL=postgres://postgres:postgres@localhost:5432/cesizen
            JWT_SECRET=${{ secrets.JWT_SECRET }}

  build-backoffice-image:
    runs-on: ubuntu-latest
    needs: ci-backoffice
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Connection Ã  DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: ./BACKOFFICE
          file: ./BACKOFFICE/Dockerfile.prod
          push: true
          tags: |
            ghcr.io/melandry27/CDAIndiv/backoffice:latest
            ghcr.io/melandry27/CDAIndiv/backoffice:${{ github.sha }}
          build-args: |
            VITE_API_URL=http://34.224.12.85:3000/api

  build-app-image:
    runs-on: ubuntu-latest
    needs: ci-app
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: ./APP
          file: ./APP/Dockerfile.prod
          push: true
          tags: |
            ghcr.io/melandry27/CDAIndiv/app:latest
            ghcr.io/melandry27/CDAIndiv/app:${{ github.sha }}

  # ---------------- CD ----------------
  # ------------------------------ CD ------------------------------

deploy-stack:
  runs-on: ubuntu-latest
  if: ${{ github.ref_name == 'main' }} # on livre la prod uniquement depuis main
  environment:
    name: prod
    url: http://34.224.12.85
  needs:
    - build-api-image
    - build-backoffice-image
    - build-app-image
  steps:
    - name: DÃ©ploiement complet via docker-compose
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e

          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

          cd ~
          if [ ! -d cesizen-prod ]; then
            git clone -b main https://github.com/${{ github.repository }} cesizen-prod
          fi
          cd cesizen-prod && git pull origin main

          export DOCKER_USER=ghcr.io/melandry27/CDAIndiv      # mÃªme prÃ©fixe que dans la CI
          export TAG=${{ github.sha }}                        # mÃªme tag SHA que les images
          export JWT_SECRET='${{ secrets.JWT_SECRET }}'

          sudo docker compose -f API/docker-compose.prod.yml pull
          sudo docker compose -f API/docker-compose.prod.yml up -d --remove-orphans

  setup-reverse-proxy:
    runs-on: ubuntu-latest
    needs: deploy-stack
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Setup Reverse Proxy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "ðŸ“¦ Installing Nginx..."
            sudo apt-get update
            sudo apt-get install -y nginx

            echo "ðŸ›‘ Stopping default nginx service..."
            sudo systemctl stop nginx
            sudo systemctl disable nginx

            echo "ðŸ“„ Writing nginx configuration..."
            sudo tee /etc/nginx/sites-available/cesizen << 'NGINX_CONFIG'
          #########################################
          # ENVIRONNEMENT TEST
          #########################################
          server {
            listen 80;
            server_name cesizentest.webredirect.org;

            location / {
              proxy_pass http://localhost:8082/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /backoffice/ {
            proxy_pass http://localhost:4175/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            # RÃ©Ã©crit l'URL pour que /backoffice/... => /...
            rewrite ^/backoffice(/.*)$ $1 break;
          }

            location /api/ {
              proxy_pass http://localhost:3001/api/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }

          #########################################
          # ENVIRONNEMENT PROD
          #########################################
          server {
            listen 80;
            server_name cesizenprod.webredirect.org;

            location / {
              proxy_pass http://localhost:8080/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /backoffice/ {
            proxy_pass http://localhost:4173/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            # RÃ©Ã©crit l'URL pour que /backoffice/... => /...
            rewrite ^/backoffice(/.*)$ $1 break;
          }

            location /api/ {
              proxy_pass http://localhost:3000/api/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }
          NGINX_CONFIG

            echo "ðŸ”— Enabling nginx site..."
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/cesizen /etc/nginx/sites-enabled/

            echo "âœ… Testing nginx configuration..."
            sudo nginx -t

            echo "ðŸš€ Starting nginx service..."
            sudo systemctl enable nginx
            sudo systemctl start nginx
            sudo systemctl reload nginx

            echo "ðŸ“Š Nginx status:"
            sudo systemctl status nginx --no-pager -l
          EOF
